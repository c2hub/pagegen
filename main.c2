module pagegen;

import stdio as io local;
import stdlib local;
import c2vector as vctr local;
import utils local;
import string local;
import unistd local;

vector files;
public bool debug = 1;

public func int32 main()
{
	vctr.init(&files);
	char[1024] buf;
    while(strcmp(buf, "/") != 0)
    {
        tputs(getcwd(buf, 1024));
        if(access("pagelist.txt", R_OK) == 0)
        {
            tputs("found");
            tprintf("%s\n", loadfile("pagelist.txt"));
            char* pagelist;
            pagelist = loadfile("pagelist.txt");
            tputs("successfully loaded pagelist");
            parse(pagelist);
            break;
        }
        chdir("../");
    }
    if(access("template.txt", R_OK) == 0)
    {
        tputs("template found");
        char* template = loadfile("template.txt");
        tputs("template loaded");
        tprintf("number of stuff in the vector: %d\n", cast<void*>(vctr.total(&files)));
        for(int32 i = 0; i < vctr.total(&files); i++)
        {
            char* name = vctr.get(&files, i);
            char* noext = strdup(name);
            char* trunc;
            if ( (trunc = strstr( noext, ".half" )) != nil )
            *trunc = '\0';
            tprintf("building %s\n", name);
            char* content = loadfile(name);
            char* complete = malloc(sizeof(template) + sizeof(content));
            sprintf(complete, template, content);
            char[80] fullname;
            sprintf(fullname, "%s.html", noext);
            FILE* fp = fopen(fullname, "w");
            if (fp != nil) 
            {
                fprintf(fp, complete);
                fclose(fp);
                tputs("file written");
            }
        }
    }
	return 0;
}

public func int32 parse(char* pagelist)
{
    tputs("parsing");
    char* buffer = strdup(pagelist);
    tputs("copied pagelist");
    char* token = strsep(&buffer, "\n");
    tputs("started strsep");
    tputs(token);
    while(token != nil)
    {
        if(strcmp(token, "") == 0)
        {
            token = strsep(&buffer, '\n');
            continue;
        }
        vctr.add(&files, token);
        token = strsep(&buffer, '\n');
    }
    tputs("parsing complete");
    return 0;
}